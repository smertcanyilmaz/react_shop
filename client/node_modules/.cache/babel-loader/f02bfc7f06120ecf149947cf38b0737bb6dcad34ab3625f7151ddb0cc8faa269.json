{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createStripe = void 0;\nconst _Error = require(\"./Error.js\");\nconst apiVersion = require(\"./apiVersion.js\");\nconst resources = require(\"./resources.js\");\nconst HttpClient_js_1 = require(\"./net/HttpClient.js\");\nconst utils_js_1 = require(\"./utils.js\");\nconst CryptoProvider_js_1 = require(\"./crypto/CryptoProvider.js\");\nconst RequestSender_js_1 = require(\"./RequestSender.js\");\nconst StripeResource_js_1 = require(\"./StripeResource.js\");\nconst Webhooks_js_1 = require(\"./Webhooks.js\");\nconst DEFAULT_HOST = 'api.stripe.com';\nconst DEFAULT_PORT = '443';\nconst DEFAULT_BASE_PATH = '/v1/';\nconst DEFAULT_API_VERSION = apiVersion.ApiVersion;\nconst DEFAULT_TIMEOUT = 80000;\nconst MAX_NETWORK_RETRY_DELAY_SEC = 2;\nconst INITIAL_NETWORK_RETRY_DELAY_SEC = 0.5;\nconst APP_INFO_PROPERTIES = ['name', 'version', 'url', 'partner_id'];\nconst ALLOWED_CONFIG_PROPERTIES = ['apiVersion', 'typescript', 'maxNetworkRetries', 'httpAgent', 'httpClient', 'timeout', 'host', 'port', 'protocol', 'telemetry', 'appInfo', 'stripeAccount'];\nconst defaultRequestSenderFactory = stripe => new RequestSender_js_1.RequestSender(stripe, StripeResource_js_1.StripeResource.MAX_BUFFERED_REQUEST_METRICS);\nfunction createStripe(platformFunctions, requestSender = defaultRequestSenderFactory) {\n  Stripe.PACKAGE_VERSION = '13.3.0';\n  Stripe.USER_AGENT = Object.assign({\n    bindings_version: Stripe.PACKAGE_VERSION,\n    lang: 'node',\n    publisher: 'stripe',\n    uname: null,\n    typescript: false\n  }, (0, utils_js_1.determineProcessUserAgentProperties)());\n  Stripe.StripeResource = StripeResource_js_1.StripeResource;\n  Stripe.resources = resources;\n  Stripe.HttpClient = HttpClient_js_1.HttpClient;\n  Stripe.HttpClientResponse = HttpClient_js_1.HttpClientResponse;\n  Stripe.CryptoProvider = CryptoProvider_js_1.CryptoProvider;\n  function Stripe(key, config = {}) {\n    if (!(this instanceof Stripe)) {\n      return new Stripe(key, config);\n    }\n    const props = this._getPropsFromConfig(config);\n    this._platformFunctions = platformFunctions;\n    Object.defineProperty(this, '_emitter', {\n      value: this._platformFunctions.createEmitter(),\n      enumerable: false,\n      configurable: false,\n      writable: false\n    });\n    this.VERSION = Stripe.PACKAGE_VERSION;\n    this.on = this._emitter.on.bind(this._emitter);\n    this.once = this._emitter.once.bind(this._emitter);\n    this.off = this._emitter.removeListener.bind(this._emitter);\n    if (props.protocol && props.protocol !== 'https' && (!props.host || /\\.stripe\\.com$/.test(props.host))) {\n      throw new Error('The `https` protocol must be used when sending requests to `*.stripe.com`');\n    }\n    const agent = props.httpAgent || null;\n    this._api = {\n      auth: null,\n      host: props.host || DEFAULT_HOST,\n      port: props.port || DEFAULT_PORT,\n      protocol: props.protocol || 'https',\n      basePath: DEFAULT_BASE_PATH,\n      version: props.apiVersion || DEFAULT_API_VERSION,\n      timeout: (0, utils_js_1.validateInteger)('timeout', props.timeout, DEFAULT_TIMEOUT),\n      maxNetworkRetries: (0, utils_js_1.validateInteger)('maxNetworkRetries', props.maxNetworkRetries, 1),\n      agent: agent,\n      httpClient: props.httpClient || (agent ? this._platformFunctions.createNodeHttpClient(agent) : this._platformFunctions.createDefaultHttpClient()),\n      dev: false,\n      stripeAccount: props.stripeAccount || null\n    };\n    const typescript = props.typescript || false;\n    if (typescript !== Stripe.USER_AGENT.typescript) {\n      // The mutation here is uncomfortable, but likely fastest;\n      // serializing the user agent involves shelling out to the system,\n      // and given some users may instantiate the library many times without switching between TS and non-TS,\n      // we only want to incur the performance hit when that actually happens.\n      Stripe.USER_AGENT.typescript = typescript;\n    }\n    if (props.appInfo) {\n      this._setAppInfo(props.appInfo);\n    }\n    this._prepResources();\n    this._setApiKey(key);\n    this.errors = _Error;\n    this.webhooks = (0, Webhooks_js_1.createWebhooks)(platformFunctions);\n    this._prevRequestMetrics = [];\n    this._enableTelemetry = props.telemetry !== false;\n    this._requestSender = requestSender(this);\n    // Expose StripeResource on the instance too\n    // @ts-ignore\n    this.StripeResource = Stripe.StripeResource;\n  }\n  Stripe.errors = _Error;\n  Stripe.webhooks = Webhooks_js_1.createWebhooks;\n  Stripe.createNodeHttpClient = platformFunctions.createNodeHttpClient;\n  /**\n   * Creates an HTTP client for issuing Stripe API requests which uses the Web\n   * Fetch API.\n   *\n   * A fetch function can optionally be passed in as a parameter. If none is\n   * passed, will default to the default `fetch` function in the global scope.\n   */\n  Stripe.createFetchHttpClient = platformFunctions.createFetchHttpClient;\n  /**\n   * Create a CryptoProvider which uses the built-in Node crypto libraries for\n   * its crypto operations.\n   */\n  Stripe.createNodeCryptoProvider = platformFunctions.createNodeCryptoProvider;\n  /**\n   * Creates a CryptoProvider which uses the Subtle Crypto API from the Web\n   * Crypto API spec for its crypto operations.\n   *\n   * A SubtleCrypto interface can optionally be passed in as a parameter. If none\n   * is passed, will default to the default `crypto.subtle` object in the global\n   * scope.\n   */\n  Stripe.createSubtleCryptoProvider = platformFunctions.createSubtleCryptoProvider;\n  Stripe.prototype = {\n    // Properties are set in the constructor above\n    _appInfo: undefined,\n    on: null,\n    off: null,\n    once: null,\n    VERSION: null,\n    StripeResource: null,\n    webhooks: null,\n    errors: null,\n    _api: null,\n    _prevRequestMetrics: null,\n    _emitter: null,\n    _enableTelemetry: null,\n    _requestSender: null,\n    _platformFunctions: null,\n    /**\n     * @private\n     */\n    _setApiKey(key) {\n      if (key) {\n        this._setApiField('auth', `Bearer ${key}`);\n      }\n    },\n    /**\n     * @private\n     * This may be removed in the future.\n     */\n    _setAppInfo(info) {\n      if (info && typeof info !== 'object') {\n        throw new Error('AppInfo must be an object.');\n      }\n      if (info && !info.name) {\n        throw new Error('AppInfo.name is required');\n      }\n      info = info || {};\n      this._appInfo = APP_INFO_PROPERTIES.reduce((accum, prop) => {\n        if (typeof info[prop] == 'string') {\n          accum = accum || {};\n          accum[prop] = info[prop];\n        }\n        return accum;\n      },\n      // @ts-ignore\n      undefined);\n    },\n    /**\n     * @private\n     * This may be removed in the future.\n     */\n    _setApiField(key, value) {\n      this._api[key] = value;\n    },\n    /**\n     * @private\n     * Please open or upvote an issue at github.com/stripe/stripe-node\n     * if you use this, detailing your use-case.\n     *\n     * It may be deprecated and removed in the future.\n     */\n    getApiField(key) {\n      return this._api[key];\n    },\n    setClientId(clientId) {\n      this._clientId = clientId;\n    },\n    getClientId() {\n      return this._clientId;\n    },\n    /**\n     * @private\n     * Please open or upvote an issue at github.com/stripe/stripe-node\n     * if you use this, detailing your use-case.\n     *\n     * It may be deprecated and removed in the future.\n     */\n    getConstant: c => {\n      switch (c) {\n        case 'DEFAULT_HOST':\n          return DEFAULT_HOST;\n        case 'DEFAULT_PORT':\n          return DEFAULT_PORT;\n        case 'DEFAULT_BASE_PATH':\n          return DEFAULT_BASE_PATH;\n        case 'DEFAULT_API_VERSION':\n          return DEFAULT_API_VERSION;\n        case 'DEFAULT_TIMEOUT':\n          return DEFAULT_TIMEOUT;\n        case 'MAX_NETWORK_RETRY_DELAY_SEC':\n          return MAX_NETWORK_RETRY_DELAY_SEC;\n        case 'INITIAL_NETWORK_RETRY_DELAY_SEC':\n          return INITIAL_NETWORK_RETRY_DELAY_SEC;\n      }\n      return Stripe[c];\n    },\n    getMaxNetworkRetries() {\n      return this.getApiField('maxNetworkRetries');\n    },\n    /**\n     * @private\n     * This may be removed in the future.\n     */\n    _setApiNumberField(prop, n, defaultVal) {\n      const val = (0, utils_js_1.validateInteger)(prop, n, defaultVal);\n      this._setApiField(prop, val);\n    },\n    getMaxNetworkRetryDelay() {\n      return MAX_NETWORK_RETRY_DELAY_SEC;\n    },\n    getInitialNetworkRetryDelay() {\n      return INITIAL_NETWORK_RETRY_DELAY_SEC;\n    },\n    /**\n     * @private\n     * Please open or upvote an issue at github.com/stripe/stripe-node\n     * if you use this, detailing your use-case.\n     *\n     * It may be deprecated and removed in the future.\n     *\n     * Gets a JSON version of a User-Agent and uses a cached version for a slight\n     * speed advantage.\n     */\n    getClientUserAgent(cb) {\n      return this.getClientUserAgentSeeded(Stripe.USER_AGENT, cb);\n    },\n    /**\n     * @private\n     * Please open or upvote an issue at github.com/stripe/stripe-node\n     * if you use this, detailing your use-case.\n     *\n     * It may be deprecated and removed in the future.\n     *\n     * Gets a JSON version of a User-Agent by encoding a seeded object and\n     * fetching a uname from the system.\n     */\n    getClientUserAgentSeeded(seed, cb) {\n      this._platformFunctions.getUname().then(uname => {\n        var _a;\n        const userAgent = {};\n        for (const field in seed) {\n          userAgent[field] = encodeURIComponent((_a = seed[field]) !== null && _a !== void 0 ? _a : 'null');\n        }\n        // URI-encode in case there are unusual characters in the system's uname.\n        userAgent.uname = encodeURIComponent(uname || 'UNKNOWN');\n        const client = this.getApiField('httpClient');\n        if (client) {\n          userAgent.httplib = encodeURIComponent(client.getClientName());\n        }\n        if (this._appInfo) {\n          userAgent.application = this._appInfo;\n        }\n        cb(JSON.stringify(userAgent));\n      });\n    },\n    /**\n     * @private\n     * Please open or upvote an issue at github.com/stripe/stripe-node\n     * if you use this, detailing your use-case.\n     *\n     * It may be deprecated and removed in the future.\n     */\n    getAppInfoAsString() {\n      if (!this._appInfo) {\n        return '';\n      }\n      let formatted = this._appInfo.name;\n      if (this._appInfo.version) {\n        formatted += `/${this._appInfo.version}`;\n      }\n      if (this._appInfo.url) {\n        formatted += ` (${this._appInfo.url})`;\n      }\n      return formatted;\n    },\n    getTelemetryEnabled() {\n      return this._enableTelemetry;\n    },\n    /**\n     * @private\n     * This may be removed in the future.\n     */\n    _prepResources() {\n      for (const name in resources) {\n        // @ts-ignore\n        this[(0, utils_js_1.pascalToCamelCase)(name)] = new resources[name](this);\n      }\n    },\n    /**\n     * @private\n     * This may be removed in the future.\n     */\n    _getPropsFromConfig(config) {\n      // If config is null or undefined, just bail early with no props\n      if (!config) {\n        return {};\n      }\n      // config can be an object or a string\n      const isString = typeof config === 'string';\n      const isObject = config === Object(config) && !Array.isArray(config);\n      if (!isObject && !isString) {\n        throw new Error('Config must either be an object or a string');\n      }\n      // If config is a string, we assume the old behavior of passing in a string representation of the api version\n      if (isString) {\n        return {\n          apiVersion: config\n        };\n      }\n      // If config is an object, we assume the new behavior and make sure it doesn't contain any unexpected values\n      const values = Object.keys(config).filter(value => !ALLOWED_CONFIG_PROPERTIES.includes(value));\n      if (values.length > 0) {\n        throw new Error(`Config object may only contain the following: ${ALLOWED_CONFIG_PROPERTIES.join(', ')}`);\n      }\n      return config;\n    }\n  };\n  return Stripe;\n}\nexports.createStripe = createStripe;","map":{"version":3,"names":["Object","defineProperty","exports","value","createStripe","_Error","require","apiVersion","resources","HttpClient_js_1","utils_js_1","CryptoProvider_js_1","RequestSender_js_1","StripeResource_js_1","Webhooks_js_1","DEFAULT_HOST","DEFAULT_PORT","DEFAULT_BASE_PATH","DEFAULT_API_VERSION","ApiVersion","DEFAULT_TIMEOUT","MAX_NETWORK_RETRY_DELAY_SEC","INITIAL_NETWORK_RETRY_DELAY_SEC","APP_INFO_PROPERTIES","ALLOWED_CONFIG_PROPERTIES","defaultRequestSenderFactory","stripe","RequestSender","StripeResource","MAX_BUFFERED_REQUEST_METRICS","platformFunctions","requestSender","Stripe","PACKAGE_VERSION","USER_AGENT","assign","bindings_version","lang","publisher","uname","typescript","determineProcessUserAgentProperties","HttpClient","HttpClientResponse","CryptoProvider","key","config","props","_getPropsFromConfig","_platformFunctions","createEmitter","enumerable","configurable","writable","VERSION","on","_emitter","bind","once","off","removeListener","protocol","host","test","Error","agent","httpAgent","_api","auth","port","basePath","version","timeout","validateInteger","maxNetworkRetries","httpClient","createNodeHttpClient","createDefaultHttpClient","dev","stripeAccount","appInfo","_setAppInfo","_prepResources","_setApiKey","errors","webhooks","createWebhooks","_prevRequestMetrics","_enableTelemetry","telemetry","_requestSender","createFetchHttpClient","createNodeCryptoProvider","createSubtleCryptoProvider","prototype","_appInfo","undefined","_setApiField","info","name","reduce","accum","prop","getApiField","setClientId","clientId","_clientId","getClientId","getConstant","c","getMaxNetworkRetries","_setApiNumberField","n","defaultVal","val","getMaxNetworkRetryDelay","getInitialNetworkRetryDelay","getClientUserAgent","cb","getClientUserAgentSeeded","seed","getUname","then","_a","userAgent","field","encodeURIComponent","client","httplib","getClientName","application","JSON","stringify","getAppInfoAsString","formatted","url","getTelemetryEnabled","pascalToCamelCase","isString","isObject","Array","isArray","values","keys","filter","includes","length","join"],"sources":["C:/Users/Smert/OneDrive/Masaüstü/coding/React/react_website_projects/react_shopping_app/client/node_modules/stripe/cjs/stripe.core.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createStripe = void 0;\nconst _Error = require(\"./Error.js\");\nconst apiVersion = require(\"./apiVersion.js\");\nconst resources = require(\"./resources.js\");\nconst HttpClient_js_1 = require(\"./net/HttpClient.js\");\nconst utils_js_1 = require(\"./utils.js\");\nconst CryptoProvider_js_1 = require(\"./crypto/CryptoProvider.js\");\nconst RequestSender_js_1 = require(\"./RequestSender.js\");\nconst StripeResource_js_1 = require(\"./StripeResource.js\");\nconst Webhooks_js_1 = require(\"./Webhooks.js\");\nconst DEFAULT_HOST = 'api.stripe.com';\nconst DEFAULT_PORT = '443';\nconst DEFAULT_BASE_PATH = '/v1/';\nconst DEFAULT_API_VERSION = apiVersion.ApiVersion;\nconst DEFAULT_TIMEOUT = 80000;\nconst MAX_NETWORK_RETRY_DELAY_SEC = 2;\nconst INITIAL_NETWORK_RETRY_DELAY_SEC = 0.5;\nconst APP_INFO_PROPERTIES = ['name', 'version', 'url', 'partner_id'];\nconst ALLOWED_CONFIG_PROPERTIES = [\n    'apiVersion',\n    'typescript',\n    'maxNetworkRetries',\n    'httpAgent',\n    'httpClient',\n    'timeout',\n    'host',\n    'port',\n    'protocol',\n    'telemetry',\n    'appInfo',\n    'stripeAccount',\n];\nconst defaultRequestSenderFactory = (stripe) => new RequestSender_js_1.RequestSender(stripe, StripeResource_js_1.StripeResource.MAX_BUFFERED_REQUEST_METRICS);\nfunction createStripe(platformFunctions, requestSender = defaultRequestSenderFactory) {\n    Stripe.PACKAGE_VERSION = '13.3.0';\n    Stripe.USER_AGENT = Object.assign({ bindings_version: Stripe.PACKAGE_VERSION, lang: 'node', publisher: 'stripe', uname: null, typescript: false }, (0, utils_js_1.determineProcessUserAgentProperties)());\n    Stripe.StripeResource = StripeResource_js_1.StripeResource;\n    Stripe.resources = resources;\n    Stripe.HttpClient = HttpClient_js_1.HttpClient;\n    Stripe.HttpClientResponse = HttpClient_js_1.HttpClientResponse;\n    Stripe.CryptoProvider = CryptoProvider_js_1.CryptoProvider;\n    function Stripe(key, config = {}) {\n        if (!(this instanceof Stripe)) {\n            return new Stripe(key, config);\n        }\n        const props = this._getPropsFromConfig(config);\n        this._platformFunctions = platformFunctions;\n        Object.defineProperty(this, '_emitter', {\n            value: this._platformFunctions.createEmitter(),\n            enumerable: false,\n            configurable: false,\n            writable: false,\n        });\n        this.VERSION = Stripe.PACKAGE_VERSION;\n        this.on = this._emitter.on.bind(this._emitter);\n        this.once = this._emitter.once.bind(this._emitter);\n        this.off = this._emitter.removeListener.bind(this._emitter);\n        if (props.protocol &&\n            props.protocol !== 'https' &&\n            (!props.host || /\\.stripe\\.com$/.test(props.host))) {\n            throw new Error('The `https` protocol must be used when sending requests to `*.stripe.com`');\n        }\n        const agent = props.httpAgent || null;\n        this._api = {\n            auth: null,\n            host: props.host || DEFAULT_HOST,\n            port: props.port || DEFAULT_PORT,\n            protocol: props.protocol || 'https',\n            basePath: DEFAULT_BASE_PATH,\n            version: props.apiVersion || DEFAULT_API_VERSION,\n            timeout: (0, utils_js_1.validateInteger)('timeout', props.timeout, DEFAULT_TIMEOUT),\n            maxNetworkRetries: (0, utils_js_1.validateInteger)('maxNetworkRetries', props.maxNetworkRetries, 1),\n            agent: agent,\n            httpClient: props.httpClient ||\n                (agent\n                    ? this._platformFunctions.createNodeHttpClient(agent)\n                    : this._platformFunctions.createDefaultHttpClient()),\n            dev: false,\n            stripeAccount: props.stripeAccount || null,\n        };\n        const typescript = props.typescript || false;\n        if (typescript !== Stripe.USER_AGENT.typescript) {\n            // The mutation here is uncomfortable, but likely fastest;\n            // serializing the user agent involves shelling out to the system,\n            // and given some users may instantiate the library many times without switching between TS and non-TS,\n            // we only want to incur the performance hit when that actually happens.\n            Stripe.USER_AGENT.typescript = typescript;\n        }\n        if (props.appInfo) {\n            this._setAppInfo(props.appInfo);\n        }\n        this._prepResources();\n        this._setApiKey(key);\n        this.errors = _Error;\n        this.webhooks = (0, Webhooks_js_1.createWebhooks)(platformFunctions);\n        this._prevRequestMetrics = [];\n        this._enableTelemetry = props.telemetry !== false;\n        this._requestSender = requestSender(this);\n        // Expose StripeResource on the instance too\n        // @ts-ignore\n        this.StripeResource = Stripe.StripeResource;\n    }\n    Stripe.errors = _Error;\n    Stripe.webhooks = Webhooks_js_1.createWebhooks;\n    Stripe.createNodeHttpClient = platformFunctions.createNodeHttpClient;\n    /**\n     * Creates an HTTP client for issuing Stripe API requests which uses the Web\n     * Fetch API.\n     *\n     * A fetch function can optionally be passed in as a parameter. If none is\n     * passed, will default to the default `fetch` function in the global scope.\n     */\n    Stripe.createFetchHttpClient = platformFunctions.createFetchHttpClient;\n    /**\n     * Create a CryptoProvider which uses the built-in Node crypto libraries for\n     * its crypto operations.\n     */\n    Stripe.createNodeCryptoProvider = platformFunctions.createNodeCryptoProvider;\n    /**\n     * Creates a CryptoProvider which uses the Subtle Crypto API from the Web\n     * Crypto API spec for its crypto operations.\n     *\n     * A SubtleCrypto interface can optionally be passed in as a parameter. If none\n     * is passed, will default to the default `crypto.subtle` object in the global\n     * scope.\n     */\n    Stripe.createSubtleCryptoProvider =\n        platformFunctions.createSubtleCryptoProvider;\n    Stripe.prototype = {\n        // Properties are set in the constructor above\n        _appInfo: undefined,\n        on: null,\n        off: null,\n        once: null,\n        VERSION: null,\n        StripeResource: null,\n        webhooks: null,\n        errors: null,\n        _api: null,\n        _prevRequestMetrics: null,\n        _emitter: null,\n        _enableTelemetry: null,\n        _requestSender: null,\n        _platformFunctions: null,\n        /**\n         * @private\n         */\n        _setApiKey(key) {\n            if (key) {\n                this._setApiField('auth', `Bearer ${key}`);\n            }\n        },\n        /**\n         * @private\n         * This may be removed in the future.\n         */\n        _setAppInfo(info) {\n            if (info && typeof info !== 'object') {\n                throw new Error('AppInfo must be an object.');\n            }\n            if (info && !info.name) {\n                throw new Error('AppInfo.name is required');\n            }\n            info = info || {};\n            this._appInfo = APP_INFO_PROPERTIES.reduce((accum, prop) => {\n                if (typeof info[prop] == 'string') {\n                    accum = accum || {};\n                    accum[prop] = info[prop];\n                }\n                return accum;\n            }, \n            // @ts-ignore\n            undefined);\n        },\n        /**\n         * @private\n         * This may be removed in the future.\n         */\n        _setApiField(key, value) {\n            this._api[key] = value;\n        },\n        /**\n         * @private\n         * Please open or upvote an issue at github.com/stripe/stripe-node\n         * if you use this, detailing your use-case.\n         *\n         * It may be deprecated and removed in the future.\n         */\n        getApiField(key) {\n            return this._api[key];\n        },\n        setClientId(clientId) {\n            this._clientId = clientId;\n        },\n        getClientId() {\n            return this._clientId;\n        },\n        /**\n         * @private\n         * Please open or upvote an issue at github.com/stripe/stripe-node\n         * if you use this, detailing your use-case.\n         *\n         * It may be deprecated and removed in the future.\n         */\n        getConstant: (c) => {\n            switch (c) {\n                case 'DEFAULT_HOST':\n                    return DEFAULT_HOST;\n                case 'DEFAULT_PORT':\n                    return DEFAULT_PORT;\n                case 'DEFAULT_BASE_PATH':\n                    return DEFAULT_BASE_PATH;\n                case 'DEFAULT_API_VERSION':\n                    return DEFAULT_API_VERSION;\n                case 'DEFAULT_TIMEOUT':\n                    return DEFAULT_TIMEOUT;\n                case 'MAX_NETWORK_RETRY_DELAY_SEC':\n                    return MAX_NETWORK_RETRY_DELAY_SEC;\n                case 'INITIAL_NETWORK_RETRY_DELAY_SEC':\n                    return INITIAL_NETWORK_RETRY_DELAY_SEC;\n            }\n            return Stripe[c];\n        },\n        getMaxNetworkRetries() {\n            return this.getApiField('maxNetworkRetries');\n        },\n        /**\n         * @private\n         * This may be removed in the future.\n         */\n        _setApiNumberField(prop, n, defaultVal) {\n            const val = (0, utils_js_1.validateInteger)(prop, n, defaultVal);\n            this._setApiField(prop, val);\n        },\n        getMaxNetworkRetryDelay() {\n            return MAX_NETWORK_RETRY_DELAY_SEC;\n        },\n        getInitialNetworkRetryDelay() {\n            return INITIAL_NETWORK_RETRY_DELAY_SEC;\n        },\n        /**\n         * @private\n         * Please open or upvote an issue at github.com/stripe/stripe-node\n         * if you use this, detailing your use-case.\n         *\n         * It may be deprecated and removed in the future.\n         *\n         * Gets a JSON version of a User-Agent and uses a cached version for a slight\n         * speed advantage.\n         */\n        getClientUserAgent(cb) {\n            return this.getClientUserAgentSeeded(Stripe.USER_AGENT, cb);\n        },\n        /**\n         * @private\n         * Please open or upvote an issue at github.com/stripe/stripe-node\n         * if you use this, detailing your use-case.\n         *\n         * It may be deprecated and removed in the future.\n         *\n         * Gets a JSON version of a User-Agent by encoding a seeded object and\n         * fetching a uname from the system.\n         */\n        getClientUserAgentSeeded(seed, cb) {\n            this._platformFunctions.getUname().then((uname) => {\n                var _a;\n                const userAgent = {};\n                for (const field in seed) {\n                    userAgent[field] = encodeURIComponent((_a = seed[field]) !== null && _a !== void 0 ? _a : 'null');\n                }\n                // URI-encode in case there are unusual characters in the system's uname.\n                userAgent.uname = encodeURIComponent(uname || 'UNKNOWN');\n                const client = this.getApiField('httpClient');\n                if (client) {\n                    userAgent.httplib = encodeURIComponent(client.getClientName());\n                }\n                if (this._appInfo) {\n                    userAgent.application = this._appInfo;\n                }\n                cb(JSON.stringify(userAgent));\n            });\n        },\n        /**\n         * @private\n         * Please open or upvote an issue at github.com/stripe/stripe-node\n         * if you use this, detailing your use-case.\n         *\n         * It may be deprecated and removed in the future.\n         */\n        getAppInfoAsString() {\n            if (!this._appInfo) {\n                return '';\n            }\n            let formatted = this._appInfo.name;\n            if (this._appInfo.version) {\n                formatted += `/${this._appInfo.version}`;\n            }\n            if (this._appInfo.url) {\n                formatted += ` (${this._appInfo.url})`;\n            }\n            return formatted;\n        },\n        getTelemetryEnabled() {\n            return this._enableTelemetry;\n        },\n        /**\n         * @private\n         * This may be removed in the future.\n         */\n        _prepResources() {\n            for (const name in resources) {\n                // @ts-ignore\n                this[(0, utils_js_1.pascalToCamelCase)(name)] = new resources[name](this);\n            }\n        },\n        /**\n         * @private\n         * This may be removed in the future.\n         */\n        _getPropsFromConfig(config) {\n            // If config is null or undefined, just bail early with no props\n            if (!config) {\n                return {};\n            }\n            // config can be an object or a string\n            const isString = typeof config === 'string';\n            const isObject = config === Object(config) && !Array.isArray(config);\n            if (!isObject && !isString) {\n                throw new Error('Config must either be an object or a string');\n            }\n            // If config is a string, we assume the old behavior of passing in a string representation of the api version\n            if (isString) {\n                return {\n                    apiVersion: config,\n                };\n            }\n            // If config is an object, we assume the new behavior and make sure it doesn't contain any unexpected values\n            const values = Object.keys(config).filter((value) => !ALLOWED_CONFIG_PROPERTIES.includes(value));\n            if (values.length > 0) {\n                throw new Error(`Config object may only contain the following: ${ALLOWED_CONFIG_PROPERTIES.join(', ')}`);\n            }\n            return config;\n        },\n    };\n    return Stripe;\n}\nexports.createStripe = createStripe;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}