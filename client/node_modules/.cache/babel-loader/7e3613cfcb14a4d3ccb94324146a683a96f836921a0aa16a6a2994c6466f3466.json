{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/Smert/OneDrive/Masa\\xFCst\\xFC/react_shop/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/Smert/OneDrive/Masa\\xFCst\\xFC/react_shop/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HttpClientResponse = exports.HttpClient = void 0;\n/**\n * Encapsulates the logic for issuing a request to the Stripe API.\n *\n * A custom HTTP client should should implement:\n * 1. A response class which extends HttpClientResponse and wraps around their\n *    own internal representation of a response.\n * 2. A client class which extends HttpClient and implements all methods,\n *    returning their own response class when making requests.\n */\nvar HttpClient = /*#__PURE__*/function () {\n  function HttpClient() {\n    _classCallCheck(this, HttpClient);\n  }\n  _createClass(HttpClient, [{\n    key: \"getClientName\",\n    value: /** The client name used for diagnostics. */\n    function getClientName() {\n      throw new Error('getClientName not implemented.');\n    }\n  }, {\n    key: \"makeRequest\",\n    value: function makeRequest(host, port, path, method, headers, requestData, protocol, timeout) {\n      throw new Error('makeRequest not implemented.');\n    }\n    /** Helper to make a consistent timeout error across implementations. */\n  }], [{\n    key: \"makeTimeoutError\",\n    value: function makeTimeoutError() {\n      var timeoutErr = new TypeError(HttpClient.TIMEOUT_ERROR_CODE);\n      timeoutErr.code = HttpClient.TIMEOUT_ERROR_CODE;\n      return timeoutErr;\n    }\n  }]);\n  return HttpClient;\n}();\nexports.HttpClient = HttpClient;\n// Public API accessible via Stripe.HttpClient\nHttpClient.CONNECTION_CLOSED_ERROR_CODES = ['ECONNRESET', 'EPIPE'];\nHttpClient.TIMEOUT_ERROR_CODE = 'ETIMEDOUT';\nvar HttpClientResponse = /*#__PURE__*/function () {\n  function HttpClientResponse(statusCode, headers) {\n    _classCallCheck(this, HttpClientResponse);\n    this._statusCode = statusCode;\n    this._headers = headers;\n  }\n  _createClass(HttpClientResponse, [{\n    key: \"getStatusCode\",\n    value: function getStatusCode() {\n      return this._statusCode;\n    }\n  }, {\n    key: \"getHeaders\",\n    value: function getHeaders() {\n      return this._headers;\n    }\n  }, {\n    key: \"getRawResponse\",\n    value: function getRawResponse() {\n      throw new Error('getRawResponse not implemented.');\n    }\n  }, {\n    key: \"toStream\",\n    value: function toStream(streamCompleteCallback) {\n      throw new Error('toStream not implemented.');\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      throw new Error('toJSON not implemented.');\n    }\n  }]);\n  return HttpClientResponse;\n}();\nexports.HttpClientResponse = HttpClientResponse;","map":{"version":3,"names":["_classCallCheck","require","default","_createClass","Object","defineProperty","exports","value","HttpClientResponse","HttpClient","key","getClientName","Error","makeRequest","host","port","path","method","headers","requestData","protocol","timeout","makeTimeoutError","timeoutErr","TypeError","TIMEOUT_ERROR_CODE","code","CONNECTION_CLOSED_ERROR_CODES","statusCode","_statusCode","_headers","getStatusCode","getHeaders","getRawResponse","toStream","streamCompleteCallback","toJSON"],"sources":["C:/Users/Smert/OneDrive/Masaüstü/react_shop/client/node_modules/stripe/cjs/net/HttpClient.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpClientResponse = exports.HttpClient = void 0;\n/**\n * Encapsulates the logic for issuing a request to the Stripe API.\n *\n * A custom HTTP client should should implement:\n * 1. A response class which extends HttpClientResponse and wraps around their\n *    own internal representation of a response.\n * 2. A client class which extends HttpClient and implements all methods,\n *    returning their own response class when making requests.\n */\nclass HttpClient {\n    /** The client name used for diagnostics. */\n    getClientName() {\n        throw new Error('getClientName not implemented.');\n    }\n    makeRequest(host, port, path, method, headers, requestData, protocol, timeout) {\n        throw new Error('makeRequest not implemented.');\n    }\n    /** Helper to make a consistent timeout error across implementations. */\n    static makeTimeoutError() {\n        const timeoutErr = new TypeError(HttpClient.TIMEOUT_ERROR_CODE);\n        timeoutErr.code = HttpClient.TIMEOUT_ERROR_CODE;\n        return timeoutErr;\n    }\n}\nexports.HttpClient = HttpClient;\n// Public API accessible via Stripe.HttpClient\nHttpClient.CONNECTION_CLOSED_ERROR_CODES = ['ECONNRESET', 'EPIPE'];\nHttpClient.TIMEOUT_ERROR_CODE = 'ETIMEDOUT';\nclass HttpClientResponse {\n    constructor(statusCode, headers) {\n        this._statusCode = statusCode;\n        this._headers = headers;\n    }\n    getStatusCode() {\n        return this._statusCode;\n    }\n    getHeaders() {\n        return this._headers;\n    }\n    getRawResponse() {\n        throw new Error('getRawResponse not implemented.');\n    }\n    toStream(streamCompleteCallback) {\n        throw new Error('toStream not implemented.');\n    }\n    toJSON() {\n        throw new Error('toJSON not implemented.');\n    }\n}\nexports.HttpClientResponse = HttpClientResponse;\n"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,eAAA,GAAAC,OAAA,mHAAAC,OAAA;AAAA,IAAAC,YAAA,GAAAF,OAAA,gHAAAC,OAAA;AACbE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAGF,OAAO,CAACG,UAAU,GAAG,KAAK,CAAC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,IASMA,UAAU;EAAA,SAAAA,WAAA;IAAAT,eAAA,OAAAS,UAAA;EAAA;EAAAN,YAAA,CAAAM,UAAA;IAAAC,GAAA;IAAAH,KAAA,EACZ;IACA,SAAAI,cAAA,EAAgB;MACZ,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;IACrD;EAAC;IAAAF,GAAA;IAAAH,KAAA,EACD,SAAAM,YAAYC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,MAAM,EAAEC,OAAO,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,OAAO,EAAE;MAC3E,MAAM,IAAIT,KAAK,CAAC,8BAA8B,CAAC;IACnD;IACA;EAAA;IAAAF,GAAA;IAAAH,KAAA,EACA,SAAAe,iBAAA,EAA0B;MACtB,IAAMC,UAAU,GAAG,IAAIC,SAAS,CAACf,UAAU,CAACgB,kBAAkB,CAAC;MAC/DF,UAAU,CAACG,IAAI,GAAGjB,UAAU,CAACgB,kBAAkB;MAC/C,OAAOF,UAAU;IACrB;EAAC;EAAA,OAAAd,UAAA;AAAA;AAELH,OAAO,CAACG,UAAU,GAAGA,UAAU;AAC/B;AACAA,UAAU,CAACkB,6BAA6B,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;AAClElB,UAAU,CAACgB,kBAAkB,GAAG,WAAW;AAAC,IACtCjB,kBAAkB;EACpB,SAAAA,mBAAYoB,UAAU,EAAEV,OAAO,EAAE;IAAAlB,eAAA,OAAAQ,kBAAA;IAC7B,IAAI,CAACqB,WAAW,GAAGD,UAAU;IAC7B,IAAI,CAACE,QAAQ,GAAGZ,OAAO;EAC3B;EAACf,YAAA,CAAAK,kBAAA;IAAAE,GAAA;IAAAH,KAAA,EACD,SAAAwB,cAAA,EAAgB;MACZ,OAAO,IAAI,CAACF,WAAW;IAC3B;EAAC;IAAAnB,GAAA;IAAAH,KAAA,EACD,SAAAyB,WAAA,EAAa;MACT,OAAO,IAAI,CAACF,QAAQ;IACxB;EAAC;IAAApB,GAAA;IAAAH,KAAA,EACD,SAAA0B,eAAA,EAAiB;MACb,MAAM,IAAIrB,KAAK,CAAC,iCAAiC,CAAC;IACtD;EAAC;IAAAF,GAAA;IAAAH,KAAA,EACD,SAAA2B,SAASC,sBAAsB,EAAE;MAC7B,MAAM,IAAIvB,KAAK,CAAC,2BAA2B,CAAC;IAChD;EAAC;IAAAF,GAAA;IAAAH,KAAA,EACD,SAAA6B,OAAA,EAAS;MACL,MAAM,IAAIxB,KAAK,CAAC,yBAAyB,CAAC;IAC9C;EAAC;EAAA,OAAAJ,kBAAA;AAAA;AAELF,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}