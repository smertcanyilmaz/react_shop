{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Smert\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\react_shop\\\\client\\\\src\\\\components\\\\List\\\\List.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"../Card/Card\";\nimport useFetch from \"../../hooks/useFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst List = ({\n  catId,\n  maxPrice,\n  subCats\n}) => {\n  _s();\n  const [sort, setSort] = useState(\"default\"); // Sıralama seçeneği\n  const [filteredData, setFilteredData] = useState([]); // Filtrelenmiş veri\n\n  // Kullanıcının sıralama seçeneğini değiştirdiğinde bu işlev çalışır.\n  const handleSortChange = newSort => {\n    setSort(newSort);\n  };\n\n  // Kullanıcı sıralama veya filtreleme seçeneklerini değiştirdiğinde API isteği yapılır.\n  const {\n    data,\n    loading,\n    error\n  } = useFetch(`/products?populate=*&[filters][categories][id]=${catId}${subCats.map(item => `&[filters][sub_categories][id][$eq]=${item}`)}&[filters][price][$lte]=${maxPrice}&sort=price:${sort}`);\n\n  // Filtreleme ve sıralama seçeneklerini dinlemek için useEffect kullanın.\n  useEffect(() => {\n    // Veriyi sıralama seçeneğine göre sıralayın.\n    const sortedData = [...data].sort((a, b) => {\n      if (sort === \"low\") {\n        return a.price - b.price;\n      } else if (sort === \"high\") {\n        return b.price - a.price;\n      } else {\n        return 0; // Varsayılan sıralama (default) için sıralamayı değiştirmez.\n      }\n    });\n\n    setFilteredData(sortedData);\n  }, [data, sort]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-5xl grid grid-cols-4 gap-8\",\n    children: loading ? \"Loading\" : filteredData === null || filteredData === void 0 ? void 0 : filteredData.map(item => /*#__PURE__*/_jsxDEV(Card, {\n      item: item\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 39\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(List, \"rys1W55dcDVI/vLcHPU+yHTwDqs=\", false, function () {\n  return [useFetch];\n});\n_c = List;\nexport default List;\nvar _c;\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["React","useState","useEffect","Card","useFetch","jsxDEV","_jsxDEV","List","catId","maxPrice","subCats","_s","sort","setSort","filteredData","setFilteredData","handleSortChange","newSort","data","loading","error","map","item","sortedData","a","b","price","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Smert/OneDrive/Masaüstü/react_shop/client/src/components/List/List.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Card from \"../Card/Card\";\r\nimport useFetch from \"../../hooks/useFetch\";\r\n\r\nconst List = ({ catId, maxPrice, subCats }) => {\r\n  const [sort, setSort] = useState(\"default\"); // Sıralama seçeneği\r\n  const [filteredData, setFilteredData] = useState([]); // Filtrelenmiş veri\r\n\r\n  // Kullanıcının sıralama seçeneğini değiştirdiğinde bu işlev çalışır.\r\n  const handleSortChange = (newSort) => {\r\n    setSort(newSort);\r\n  };\r\n\r\n  // Kullanıcı sıralama veya filtreleme seçeneklerini değiştirdiğinde API isteği yapılır.\r\n  const { data, loading, error } = useFetch(\r\n    `/products?populate=*&[filters][categories][id]=${catId}${subCats.map(\r\n      (item) => `&[filters][sub_categories][id][$eq]=${item}`\r\n    )}&[filters][price][$lte]=${maxPrice}&sort=price:${sort}`\r\n  );\r\n\r\n  // Filtreleme ve sıralama seçeneklerini dinlemek için useEffect kullanın.\r\n  useEffect(() => {\r\n    // Veriyi sıralama seçeneğine göre sıralayın.\r\n    const sortedData = [...data].sort((a, b) => {\r\n      if (sort === \"low\") {\r\n        return a.price - b.price;\r\n      } else if (sort === \"high\") {\r\n        return b.price - a.price;\r\n      } else {\r\n        return 0; // Varsayılan sıralama (default) için sıralamayı değiştirmez.\r\n      }\r\n    });\r\n\r\n    setFilteredData(sortedData);\r\n  }, [data, sort]);\r\n\r\n  return (\r\n    <div className=\"max-w-5xl grid grid-cols-4 gap-8\">\r\n      {loading\r\n        ? \"Loading\"\r\n        : filteredData?.map((item) => <Card item={item} key={item.id} />)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,QAAQ,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,IAAI,GAAGA,CAAC;EAAEC,KAAK;EAAEC,QAAQ;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAMe,gBAAgB,GAAIC,OAAO,IAAK;IACpCJ,OAAO,CAACI,OAAO,CAAC;EAClB,CAAC;;EAED;EACA,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGhB,QAAQ,CACtC,kDAAiDI,KAAM,GAAEE,OAAO,CAACW,GAAG,CAClEC,IAAI,IAAM,uCAAsCA,IAAK,EACxD,CAAE,2BAA0Bb,QAAS,eAAcG,IAAK,EAC1D,CAAC;;EAED;EACAV,SAAS,CAAC,MAAM;IACd;IACA,MAAMqB,UAAU,GAAG,CAAC,GAAGL,IAAI,CAAC,CAACN,IAAI,CAAC,CAACY,CAAC,EAAEC,CAAC,KAAK;MAC1C,IAAIb,IAAI,KAAK,KAAK,EAAE;QAClB,OAAOY,CAAC,CAACE,KAAK,GAAGD,CAAC,CAACC,KAAK;MAC1B,CAAC,MAAM,IAAId,IAAI,KAAK,MAAM,EAAE;QAC1B,OAAOa,CAAC,CAACC,KAAK,GAAGF,CAAC,CAACE,KAAK;MAC1B,CAAC,MAAM;QACL,OAAO,CAAC,CAAC,CAAC;MACZ;IACF,CAAC,CAAC;;IAEFX,eAAe,CAACQ,UAAU,CAAC;EAC7B,CAAC,EAAE,CAACL,IAAI,EAAEN,IAAI,CAAC,CAAC;EAEhB,oBACEN,OAAA;IAAKqB,SAAS,EAAC,kCAAkC;IAAAC,QAAA,EAC9CT,OAAO,GACJ,SAAS,GACTL,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEO,GAAG,CAAEC,IAAI,iBAAKhB,OAAA,CAACH,IAAI;MAACmB,IAAI,EAAEA;IAAK,GAAMA,IAAI,CAACO,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChE,CAAC;AAEV,CAAC;AAACtB,EAAA,CAvCIJ,IAAI;EAAA,QAUyBH,QAAQ;AAAA;AAAA8B,EAAA,GAVrC3B,IAAI;AAyCV,eAAeA,IAAI;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}